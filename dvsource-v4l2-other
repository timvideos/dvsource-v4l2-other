#! /usr/bin/python
#
# -*- coding: utf-8 -*-
# vim: set ts=4 sw=4 et sts=4 ai:
#

"""
dvsource-v4l2-other - Video4Linux2 source for DVswitch which supports any device.
"""

import argparse
import atexit
import os
import tempfile
import time
import subprocess
import shutil

subprocess.DEVNULL = file(os.devnull, "rw+")

###############################################################################
# Argument parsing
###############################################################################

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument(
    "-d", "--device", default="/dev/video0",
    help="Video4Linux device to read the input from.")

parser.add_argument(
    "-f", "--format", default="ntsc", choices=["ntsc", "pal"],
    help="Choose DV output format.")
parser.add_argument(
    "-a", "--aspect", default="4:3", choices=["4:3", "16:9"],
    help="Choose DV output aspect ratio.")
parser.add_argument(
    "-t", "--timeout", type=int, default=10,
    help="How long to wait when terminating subprocess before killing.")

fake_types = {
    None: 0,
    "": 0,
    "smpte": 0,
    "snow": 1,
    "black": 2,
    "white": 3,
    "red": 4,
    "green": 5,
    "blue": 6,
    "checkers-1": 7,
    "checkers-2": 8,
    "checkers-4": 9,
    "checkers-8": 10,
    "circular": 11,
    "blink": 12,
    "smpte": 13,
    "zone-plate": 14,
    "gamut": 15,
    "chroma-zone-plate": 16,
    "solid-color": 17,
    "ball": 18,
    "smpte": 19,
    "bar": 20,
    }
parser.add_argument(
    "-n", "--fake", choices=fake_types.keys(),
    help="Use a fake source rather then a real V4L2 device.")

parser.add_argument(
    "-v", "--verbose", action="store_true",
    help="Increase output verbosity")

# dvswitch arguments
parser.add_argument(
    "-h", "--host", 
    help=(""
        "Specify the network address on which DVswitch is listening. The host"
        " address may be specified by name or as an IPv4 or IPv6 literal.")
    )
parser.add_argument(
    "-p", "--port",
    help=(""
        "Specify the network address on which DVswitch is listening. The host"
        " address may be specified by name or as an IPv4 or IPv6 literal.")
    )
parser.add_argument(
    "--help", action='help',
    help="show this help message and exit")

###############################################################################
# Code to check dependencies
###############################################################################
def check_command(name):
    try:
        output = subprocess.check_output(["which", name])
        if args.verbose:
          print "Using", name, "found at", output.strip()
    except subprocess.CalledProcessError, e:
        print "Unable to find required command:", name
        raise

def check_gst_module(name):
    try:
        subprocess.check_call(["gst-inspect-0.10", name], stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError, e:
        print "Unable to find required gstreamer module", name
        raise

###############################################################################
# Code to which actually does the work
###############################################################################
def create_fifo():
    tmpdir = tempfile.mkdtemp()
    def cleanup_fifo():
      def print_error(e):
         print e
      shutil.rmtree(tmpdir, False, print_error)
    atexit.register(cleanup_fifo)

    fifoname = os.path.join(tmpdir, 'fifo.dv')
    if args.verbose:
        print "Making fifo at ", fifoname
    os.mkfifo(fifoname)
    return fifoname


def launch_gstreamer(fifoname):

    """\
gst-launch-0.10 -v \
  dvswitchsrc hostname=130.216.0.151 port=1234 \
  ! dvdemux name=demux \
  \
  demux. \
  ! queue \
  ! dvdec \
  ! ffmpegcolorspace \
  ! x264enc \
    bitrate=2000 key-int-max=60 bframes=0 \
    byte-stream=false aud=true tune=zerolatency \
  ! h264parse \
  ! "video/x-h264,profile=main" \
  ! mux. \
  \
  demux. \
  ! queue \
  ! audioconvert \
  ! voaacenc bitrate=128000 \
  ! mux. \
  \
  flvmux streamable=true name=mux \
  ! rtmpsink location="rtmp://a.rtmp.youtube.com/live2/x/$AUTH app=live2"


    """

    cmdargs = {}
    if args.verbose:
        print "Running the gstreamer conversion command of"
        print "   ", cmd
    else:
        cmdargs["stdout"] = subprocess.DEVNULL

    return subprocess.Popen(cmd, shell=True, **cmdargs)

def launch_dvsource(fifoname):
    cmd = "dvsource-file "
    if args.host:
       cmd += "--host " + args.host + " "
    if args.port:
       cmd += "--port " + args.port + " "
    cmd += fifoname

    cmdargs = {}
    if args.verbose:
        print "Running the dvsource-file command of"
        print "   ", cmd
    else:
        cmdargs["stdout"] = subprocess.DEVNULL

    return subprocess.Popen(cmd, shell=True, **cmdargs)


###############################################################################
# Main function
###############################################################################
def main():
    # Check that dvsource-file is installed
    check_command("dvsource-file")
    # Check that gstreamer stuff is installed
    check_command("gst-inspect-0.10")
    check_command("gst-launch-0.10")
    check_gst_module("v4l2src")
    check_gst_module("decodebin2")
    check_gst_module("videoscale")
    check_gst_module("videorate")
    check_gst_module("ffmpegcolorspace")
    check_gst_module("ffenc_dvvideo")
    check_gst_module("ffmux_dv")
    check_gst_module("filesink")

    # Create the fifo
    fifoname = create_fifo()
    # Launch the sub-commands
    dvsource = launch_dvsource(fifoname)
    gst = launch_gstreamer(fifoname)

    try:
        while True:
            if dvsource.poll() != None:
                raise OSError("dvsource-file command terminated!")
            if gst.poll() != None:
                raise OSError("gst-launch command terminated!")

            # FIXME: Add some type of monitoring of CPU usage here...
            if args.verbose:
                print "Commands happily running!"

            time.sleep(1.0)
    finally:
        exitstart = time.time()

        # To not get errors, terminate gst first, then dvsource

        try:
            if args.verbose:
                print "Terminating gst-launch"
            gst.terminate()
        except Exception, e:
            print "Error terminating gst-launch", e
        try:
            if args.verbose:
                print "Terminating dvsource-file"
            dvsource.terminate()
        except Exception, e:
            print "Error terminating dvsource-file", e

        while True:
            if dvsource.poll() != None and gst.poll() != None:
                break

            if args.verbose:
                print "Waiting for dvsource / gst-launch to terminate"
            time.sleep(1)

            if time.time() - exitstart > args.timeout:
                print "Timeout waiting for dvsource / gst-launch",
                print "to terminate, killing."

		try:
		    gst.kill()
		except Exception, e:
		    print "Error killing gst-launch", e

		try:
		    dvsource.kill()
		except Exception, e:
		    print "Error killing dvsource-file", e

args = None
if __name__ == "__main__":
    args = parser.parse_args()
    main()
